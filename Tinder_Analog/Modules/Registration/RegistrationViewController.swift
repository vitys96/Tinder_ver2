//
//  RegistrationViewController.swift
//  Tinder_Analog
//
//  Created Vitaly on 12.10.2019.
//  Copyright Â© 2019 Vitaly. All rights reserved.
//
//  Template generated by Sakhabaev Egor @Banck
//  https://github.com/Banck/Swift-viper-template-for-xcode
//

import UIKit
import Firebase

class RegistrationViewController: UIViewController {
    // MARK: - Properties
    var presenter: RegistrationPresenterInterface?
    
    lazy var selectPhotoButton: UIButton = {
        let button = UIButton(type: .system)
        button.setTitle("Select Photo", for: .normal)
        button.titleLabel?.font = UIFont.systemFont(ofSize: 32, weight: .heavy)
        button.backgroundColor = .white
        button.setTitleColor(.black, for: .normal)
        button.heightAnchor.constraint(equalToConstant: 275).isActive = true
        button.addTarget(self, action: #selector(handleSelectPhoto), for: .touchUpInside)
        button.layer.cornerRadius = 16
        button.imageView?.contentMode = .scaleAspectFill
        button.clipsToBounds = true
        return button
    }()
    
    lazy var fullNameTextField: CustomTextField = {
        let tf = CustomTextField(padding: 24)
        tf.placeholder = "Full name"
        tf.backgroundColor = .white
        return tf
    }()
    lazy var emailTextField: CustomTextField = {
        let tf = CustomTextField(padding: 24)
        tf.placeholder = "E-mail"
        tf.keyboardType = .emailAddress
        tf.backgroundColor = .white
        return tf
    }()
    lazy var passwordTextField: CustomTextField = {
        let tf = CustomTextField(padding: 24)
        tf.placeholder = "Password"
        tf.isSecureTextEntry = true
        tf.backgroundColor = .white
        return tf
    }()
    
    lazy var registerButton: UIButton = {
        let button = UIButton(type: .system)
        button.setTitle("Register", for: .normal)
        button.setTitleColor(.white, for: .normal)
        button.titleLabel?.font = UIFont.systemFont(ofSize: 16, weight: .heavy)
        button.backgroundColor = .lightGray
        button.setTitleColor(.gray, for: .disabled)
        button.isEnabled = false
        button.heightAnchor.constraint(equalToConstant: 44).isActive = true
        button.addTarget(self, action: #selector(handleRegister), for: .touchUpInside)
        button.layer.cornerRadius = 22
        return button
    }()
    
    lazy var stackView = UIStackView(arrangedSubviews: [
        selectPhotoButton,
        fullNameTextField,
        emailTextField,
        passwordTextField,
        registerButton
    ])
    
    // MARK: - Lifecycle -
    override func viewDidLoad() {
        super.viewDidLoad()
        configureUI()
        setupNotificationObserves()
        setupRegistrationViewModelObserver()
    }
    
    override func viewWillDisappear(_ animated: Bool) {
        super.viewWillDisappear(animated)
        NotificationCenter.default.removeObserver(self)
    }
    
}
extension RegistrationViewController {
    private func configureUI() {
        self.view.setGradient(to: view)
        view.addSubview(stackView)
        stackView.axis = .vertical
        stackView.spacing = 8
        stackView.anchor(top: nil, leading: view.leadingAnchor, bottom: nil, trailing: view.trailingAnchor, padding: .init(top: 0, left: 50, bottom: 0, right: 50))
        stackView.centerYAnchor.constraint(equalTo: view.centerYAnchor).isActive = true
        view.addGestureRecognizer(UITapGestureRecognizer(target: self, action: #selector(handleTapDismiss)))
    }
    private func setupRegistrationViewModelObserver() {
        [fullNameTextField, emailTextField, passwordTextField].forEach( {$0.addTarget(self, action: #selector(handleTextChange), for: .editingChanged)} )
        
        RegistrationViewModel.shared.isFormValidObserver = { [weak self] (isFormValid) in
            guard let self = self else { return }
            self.registerButton.isEnabled = isFormValid
            if isFormValid {
                self.registerButton.backgroundColor = #colorLiteral(red: 0.8235294118, green: 0, blue: 0.3254901961, alpha: 1)
                self.registerButton.setTitleColor(.white, for: .normal)
            } else {
                self.registerButton.backgroundColor = .lightGray
                self.registerButton.setTitleColor(.gray, for: .normal)
            }
        }
    }
    
    private func setupNotificationObserves() {
        NotificationCenter.default.addObserver(self, selector: #selector(handleKeyboardShow), name: UIResponder.keyboardWillShowNotification, object: nil)
        NotificationCenter.default.addObserver(self, selector: #selector(handleKeyboardHide), name: UIResponder.keyboardWillHideNotification, object: nil)
    }
}

extension RegistrationViewController {
    
    @objc private func handleTapDismiss() {
        self.view.endEditing(true)
    }
    
    @objc fileprivate func handleKeyboardHide() {
        UIView.animate(withDuration: 0.5, delay: 0, usingSpringWithDamping: 1, initialSpringVelocity: 1, options: .curveEaseOut, animations: {
            self.view.transform = .identity
        })
    }
    
    @objc fileprivate func handleKeyboardShow(notification: Notification) {
        guard let value = notification.userInfo?[UIResponder.keyboardFrameEndUserInfoKey] as? NSValue else { return }
        let keyboardFrame = value.cgRectValue
        let bottomSpace = view.frame.height - stackView.frame.origin.y - stackView.frame.height
        let difference = keyboardFrame.height - bottomSpace
        self.view.transform = CGAffineTransform(translationX: 0, y: -difference - 8)
    }
    
    @objc fileprivate func handleTextChange(textField: UITextField) {
        if textField == fullNameTextField {
            RegistrationViewModel.shared.fullName = textField.text
        } else if textField == emailTextField {
            RegistrationViewModel.shared.email = textField.text
        } else {
            RegistrationViewModel.shared.password = textField.text
        }
    }
    
    @objc private func handleRegister() {
        handleTapDismiss()
        guard
            let name = fullNameTextField.text,
            let email = emailTextField.text,
            let passwd = passwordTextField.text
            else { return }
        self.presenter?.createUser(userModel: RegistrationViewModel(fullName: name, email: email, password: passwd, image: selectPhotoButton.imageView?.image))
    }
    
    @objc private func handleSelectPhoto() {
        self.presenter?.didSelectFotoPicker()
       }
}

// MARK: - RegistrationView
extension RegistrationViewController: RegistrationView {
    func displayImage(_ image: UIImage) {
        self.selectPhotoButton.setImage(image, for: .normal)
    }
    
    func showCameraManager(completion: ((UIImage?) -> Void)?) {
        CameraManager.shared.showActionSheet(vc: self, completion: completion)
    }
}
